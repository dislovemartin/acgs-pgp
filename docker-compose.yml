
services:
  # Policy Service
  policy-service:
    build:
      context: ./services/policy_service
      dockerfile: Dockerfile
    container_name: policy-service
    restart: unless-stopped
    env_file:
      - ./services/policy_service/.env
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - kafka
    networks:
      - acgs-network

  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-acgs_policy}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5433:5432"
    networks:
      - acgs-network

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - acgs-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:6.2.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - acgs-network

  # Kafka UI (Optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka
    networks:
      - acgs-network

  # PgAdmin (Optional)
  # RGE Service
  rge-service:
    build:
      context: ./services/rge_service
      dockerfile: Dockerfile
    container_name: rge-service
    restart: unless-stopped
    env_file:
      - ./services/rge_service/.env
    ports:
      - "8001:8000"
    depends_on:
      - policy-service
      - kafka
    networks:
      - acgs-network

  # Synthesis Service
  synthesis-service:
    build:
      context: ./services/synthesis_service
      dockerfile: Dockerfile
    container_name: synthesis-service
    restart: unless-stopped
    env_file:
      - ./services/synthesis_service/.env
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-acgs_policy}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - POLICY_SERVICE_URL=http://policy-service:8000
    ports:
      - "8002:8002"
    depends_on:
      - postgres
      - kafka
      - policy-service
    networks:
      - acgs-network

  # PgAdmin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@acgs.local
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - acgs-network

networks:
  acgs-network:
    driver: bridge

volumes:
  postgres_data:
